openapi: 3.0.3
info:
  title: Data Hub Portal API
  description: |
    **Data Hub Portal API** provides comprehensive access to contact management, job tracking, activity logging, and file management resources.
    Built with enterprise-grade security and multi-tenant architecture for business data management.
    
    **Key Features:**
    - üè† **Contact Management**: Complete customer relationship management
    - üìã **Job Tracking**: End-to-end job lifecycle management  
    - üìù **Activity Logging**: Detailed audit trail and communication history
    - üìÅ **File Management**: Secure document and photo storage with signed URLs
    - üîí **Multi-tenant Architecture**: Complete data isolation per organization
    
    **Getting Started:**
    1. [Get your API key](https://docs.datahubportal.com/docs/getting-api-key.html)
    2. Try endpoints in the interactive playground below
    3. Review rate limiting and error handling guidelines
    
    **Rate Limits:**
    - General endpoints: 420 requests/minute per client
    - Activity endpoints: 300 requests/minute per client
    - File endpoints: 120 requests/minute per client
    - Daily quota: 100,000 requests per client
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@datahubportal.com
  license:
    name: Proprietary
    
servers:
  - url: https://api.datahubportal.com/v1
    description: Production server
  - url: https://api.staging.datahubportal.com/v1
    description: Staging server  
  - url: http://localhost:3000/v1
    description: Local development server

security:
  - BearerAuth: []

tags:
  - name: Activities
    description: Activity tracking and audit operations
  - name: Contacts
    description: Contact management operations
  - name: Jobs
    description: Job and work order operations
  - name: Files
    description: File and document management

paths:
  /v1/contacts:
    get:
      tags:
        - Contacts
      summary: List contacts
      description: Returns a paginated list of contacts for the authenticated tenant
      operationId: listContacts
      x-codeSamples:
        - lang: curl
          source: |
            curl -X GET "https://api.datahubportal.com/v1/contacts?limit=25" \
              -H "Authorization: Bearer YOUR_API_TOKEN" \
              -H "Content-Type: application/json"
        - lang: javascript
          source: |
            const response = await fetch('https://api.datahubportal.com/v1/contacts?limit=25', {
              method: 'GET',
              headers: {
                'Authorization': 'Bearer YOUR_API_TOKEN',
                'Content-Type': 'application/json'
              }
            });
            const data = await response.json();
        - lang: python
          source: |
            import requests
            
            headers = {
                'Authorization': 'Bearer YOUR_API_TOKEN',
                'Content-Type': 'application/json'
            }
            
            response = requests.get(
                'https://api.datahubportal.com/v1/contacts',
                params={'limit': 25},
                headers=headers
            )
            data = response.json()
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/dir'
        - $ref: '#/components/parameters/q'
      responses:
        '200':
          description: Successfully retrieved contacts
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Contact'
              examples:
                withContacts:
                  summary: List with contacts
                  value:
                    data:
                      - id: "con_a1b2c3d4"
                        name: "John Smith"
                        company: "Acme Corp"
                        emails:
                          - email: "john@acme.com"
                            type: "work"
                            is_primary: true
                        phones:
                          - phone: "+14155551234"
                            type: "mobile"
                            is_primary: true
                        created_at: "2024-01-15T10:30:00Z"
                        updated_at: "2024-01-15T10:30:00Z"
                      - id: "con_e5f6g7h8"
                        name: "Jane Doe"
                        emails:
                          - email: "jane.doe@example.com"
                            type: "personal"
                            is_primary: true
                        created_at: "2024-01-14T09:15:00Z"
                        updated_at: "2024-01-14T09:15:00Z"
                    total: 47
                    limit: 25
                    offset: 0
                    has_more: true
                emptyList:
                  summary: Empty contact list
                  value:
                    data: []
                    total: 0
                    limit: 25
                    offset: 0
                    has_more: false
                minimalContact:
                  summary: Contact with minimal fields (omit policy)
                  value:
                    data:
                      - id: "con_z9x8y7w6"
                        name: "Alice Johnson"
                        emails:
                          - email: "alice@example.com"
                            type: "personal"
                            is_primary: true
                        created_at: "2024-01-10T08:00:00Z"
                        updated_at: "2024-01-10T08:00:00Z"
                    total: 1
                    limit: 25
                    offset: 0
                    has_more: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

  /v1/contacts/{id}:
    get:
      tags:
        - Contacts
      summary: Get contact by ID
      description: Returns a single contact by its unique identifier
      operationId: getContactById
      parameters:
        - name: id
          in: path
          required: true
          description: Contact identifier
          schema:
            type: string
            pattern: '^con_[a-z0-9]{8}$'
            example: "con_a1b2c3d4"
      responses:
        '200':
          description: Successfully retrieved contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                fullContact:
                  summary: Contact with all fields
                  value:
                    id: "con_a1b2c3d4"
                    name: "John Smith"
                    company: "Acme Corp"
                    emails:
                      - email: "john@acme.com"
                        type: "work"
                        is_primary: true
                      - email: "john.smith@personal.com"
                        type: "personal"
                        is_primary: false
                    phones:
                      - phone: "+14155551234"
                        type: "mobile"
                        is_primary: true
                      - phone: "+14155555678"
                        type: "work"
                        is_primary: false
                    address:
                      street: "123 Main St"
                      city: "San Francisco"
                      state: "CA"
                      postal_code: "94105"
                      country: "US"
                    tags: ["vip", "contractor"]
                    created_at: "2024-01-15T10:30:00Z"
                    updated_at: "2024-01-20T14:45:00Z"
                minimalContact:
                  summary: Contact with minimal fields
                  value:
                    id: "con_e5f6g7h8"
                    name: "Jane Doe"
                    emails:
                      - email: "jane@example.com"
                        type: "personal"
                        is_primary: true
                    created_at: "2024-01-14T09:15:00Z"
                    updated_at: "2024-01-14T09:15:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

  /v1/jobs:
    get:
      tags:
        - Jobs
      summary: List jobs
      description: Returns a paginated list of jobs with optional status filtering
      operationId: listJobs
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/dir'
        - $ref: '#/components/parameters/q'
        - name: status
          in: query
          description: Filter by job status
          schema:
            type: string
            enum: [open, scheduled, in_progress, blocked, awaiting_review, completed, canceled, archived]
          example: "in_progress"
      responses:
        '200':
          description: Successfully retrieved jobs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Job'
              examples:
                activeJobs:
                  summary: List of active jobs
                  value:
                    data:
                      - id: "job_x1y2z3a4"
                        title: "HVAC Maintenance - Building A"
                        status: "in_progress"
                        status_updated_at: "2024-01-20T08:00:00Z"
                        priority: "high"
                        contact_id: "con_a1b2c3d4"
                        scheduled_start: "2024-01-20T09:00:00Z"
                        scheduled_end: "2024-01-20T17:00:00Z"
                        created_at: "2024-01-18T14:30:00Z"
                        updated_at: "2024-01-20T08:00:00Z"
                      - id: "job_b5c6d7e8"
                        title: "Electrical Inspection"
                        status: "scheduled"
                        status_updated_at: "2024-01-19T16:00:00Z"
                        priority: "medium"
                        contact_id: "con_e5f6g7h8"
                        scheduled_start: "2024-01-25T10:00:00Z"
                        created_at: "2024-01-19T16:00:00Z"
                        updated_at: "2024-01-19T16:00:00Z"
                    total: 23
                    limit: 25
                    offset: 0
                    has_more: false
                blockedJobs:
                  summary: Jobs with blocked status
                  value:
                    data:
                      - id: "job_f9g0h1i2"
                        title: "Plumbing Repair - Floor 3"
                        status: "blocked"
                        status_reason: "Awaiting parts delivery"
                        status_updated_at: "2024-01-19T11:30:00Z"
                        priority: "high"
                        contact_id: "con_a1b2c3d4"
                        created_at: "2024-01-17T09:00:00Z"
                        updated_at: "2024-01-19T11:30:00Z"
                    total: 3
                    limit: 25
                    offset: 0
                    has_more: false
                emptyJobs:
                  summary: Empty job list
                  value:
                    data: []
                    total: 0
                    limit: 25
                    offset: 0
                    has_more: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

  /v1/jobs/{jobId}/files:
    get:
      tags:
        - Files
      summary: Get job files
      description: Returns files associated with a job, including signed URLs for access
      operationId: getJobFiles
      parameters:
        - name: jobId
          in: path
          required: true
          description: Job identifier
          schema:
            type: string
            pattern: '^job_[a-z0-9]{8}$'
            example: "job_x1y2z3a4"
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: kind
          in: query
          description: Filter by file kind
          schema:
            type: string
            enum: [document, photo, invoice, report, other]
          example: "photo"
      responses:
        '200':
          description: Successfully retrieved job files
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/FileAsset'
              examples:
                withFiles:
                  summary: Job with multiple files
                  value:
                    data:
                      - id: "file_m3n4o5p6"
                        name: "site_photo_001.jpg"
                        kind: "photo"
                        size: 2457600
                        mime_type: "image/jpeg"
                        signed_url: "https://storage.example.com/files/abc123?token=xyz&expires=1705745400"
                        expires_at: "2024-01-20T10:30:00Z"
                        created_at: "2024-01-20T10:15:00Z"
                      - id: "file_q7r8s9t0"
                        name: "work_order.pdf"
                        kind: "document"
                        size: 145238
                        mime_type: "application/pdf"
                        signed_url: "https://storage.example.com/files/def456?token=abc&expires=1705745400"
                        expires_at: "2024-01-20T10:30:00Z"
                        created_at: "2024-01-19T14:00:00Z"
                    total: 5
                    limit: 25
                    offset: 0
                    has_more: false
                expiringSoon:
                  summary: Files with URLs expiring soon
                  value:
                    data:
                      - id: "file_u1v2w3x4"
                        name: "inspection_report.pdf"
                        kind: "report"
                        size: 523456
                        mime_type: "application/pdf"
                        signed_url: "https://storage.example.com/files/ghi789?token=qrs&expires=1705744500"
                        expires_at: "2024-01-20T10:15:00Z"
                        created_at: "2024-01-18T11:00:00Z"
                    total: 1
                    limit: 25
                    offset: 0
                    has_more: false
                noFiles:
                  summary: Job with no files
                  value:
                    data: []
                    total: 0
                    limit: 25
                    offset: 0
                    has_more: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

  /activity:
    get:
      tags:
        - Activities
      summary: List activities
      description: |
        Returns a paginated list of activities with comprehensive filtering options.
        Activities represent actions, notes, and events related to jobs and contacts.
        
        **Use cases:**
        - Audit trail for job progress
        - Customer communication history  
        - System event tracking
        - Team coordination updates
      operationId: listActivities
      x-codeSamples:
        - lang: curl
          source: |
            # List recent activities with pagination
            curl -X GET "https://api.datahubportal.com/v1/activity?limit=50&offset=0" \
              -H "Authorization: Bearer YOUR_API_TOKEN"
            
            # Filter by job activities only
            curl -X GET "https://api.datahubportal.com/v1/activity?entity_type=job&limit=25" \
              -H "Authorization: Bearer YOUR_API_TOKEN"
            
            # Search activities by author
            curl -X GET "https://api.datahubportal.com/v1/activity?author=John%20Smith" \
              -H "Authorization: Bearer YOUR_API_TOKEN"
        - lang: javascript
          source: |
            async function getActivities(options = {}) {
              const params = new URLSearchParams({
                limit: options.limit || 25,
                offset: options.offset || 0,
                ...(options.entityType && { entity_type: options.entityType }),
                ...(options.entityId && { entity_id: options.entityId }),
                ...(options.author && { author: options.author })
              });
              
              const response = await fetch(`https://api.datahubportal.com/v1/activity?${params}`, {
                headers: {
                  'Authorization': 'Bearer YOUR_API_TOKEN',
                  'Content-Type': 'application/json'
                }
              });
              
              return response.json();
            }
            
            // Usage examples
            const allActivities = await getActivities();
            const jobActivities = await getActivities({ entityType: 'job' });
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/dir'
        - $ref: '#/components/parameters/q'
        - name: entity_type
          in: query
          description: Filter by entity type
          schema:
            $ref: '#/components/schemas/ActivityEntityType'
          example: "job"
        - name: entity_id
          in: query
          description: Filter by specific entity ID (UUID format)
          schema:
            type: string
            format: uuid
          example: "063f3628-e7eb-46f4-8e4d-c21544711542"
        - name: author
          in: query
          description: Filter by activity author name
          schema:
            type: string
            maxLength: 100
          example: "John Smith"
        - name: since
          in: query
          description: Show activities occurred after this timestamp (ISO 8601)
          schema:
            type: string
            format: date-time
          example: "2024-01-01T00:00:00Z"
        - name: until
          in: query
          description: Show activities occurred before this timestamp (ISO 8601)
          schema:
            type: string
            format: date-time
          example: "2024-01-31T23:59:59Z"
        - name: activity_type
          in: query
          description: Filter by activity type
          schema:
            $ref: '#/components/schemas/ActivityType'
          example: "user"
        - name: priority
          in: query
          description: Filter by priority level
          schema:
            $ref: '#/components/schemas/ActivityPriority'
          example: "high"
      responses:
        '200':
          description: Successfully retrieved activities
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Activity'
              examples:
                mixed_activities:
                  summary: Mixed user and system activities
                  value:
                    data:
                      - id: "bf4ab74f-830f-45ca-9466-8932e08d7303"
                        entity_type: "job"
                        entity_id: "063f3628-e7eb-46f4-8e4d-c21544711542"
                        author: "Barron Naar"
                        body_html: "<p>Hi Ray &amp; Linda,</p><p>Attached is your invoice for the new roof‚Äîwe hope you absolutely love it!</p>"
                        body_text: "Hi Ray & Linda, Attached is your invoice for the new roof‚Äîwe hope you absolutely love it!"
                        occurred_at: "2025-08-30T20:01:00.573Z"
                        activity_type: "user"
                        priority: "normal"
                        created_at: "2025-08-30T20:01:00.573Z"
                        updated_at: "2025-08-31T04:57:48.276Z"
                      - id: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                        entity_type: "job"
                        entity_id: "063f3628-e7eb-46f4-8e4d-c21544711542"
                        author: "System"
                        body_text: "Job status automatically changed from 'in_progress' to 'completed'"
                        occurred_at: "2025-08-31T15:45:00Z"
                        activity_type: "system"
                        priority: "low"
                        created_at: "2025-08-31T15:45:00Z"
                        updated_at: "2025-08-31T15:45:00Z"
                    total: 432
                    limit: 25
                    offset: 0
                    has_more: true
                empty_activities:
                  summary: Empty activity list
                  value:
                    data: []
                    total: 0
                    limit: 25
                    offset: 0
                    has_more: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

  /activity/{activityId}:
    get:
      tags:
        - Activities
      summary: Get activity by ID
      description: Returns a single activity by its unique identifier with full details
      operationId: getActivityById
      parameters:
        - name: activityId
          in: path
          required: true
          description: Activity identifier (UUID format)
          schema:
            type: string
            format: uuid
          example: "bf4ab74f-830f-45ca-9466-8932e08d7303"
      responses:
        '200':
          description: Successfully retrieved activity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
              examples:
                user_activity:
                  summary: User-generated activity with rich content
                  value:
                    id: "bf4ab74f-830f-45ca-9466-8932e08d7303"
                    entity_type: "job"
                    entity_id: "063f3628-e7eb-46f4-8e4d-c21544711542"
                    author: "Barron Naar"
                    body_html: "<p>Hi Ray &amp; Linda,</p><p>Attached is your invoice for the new roof‚Äîwe hope you absolutely love it!</p><p>If you haven't heard from Jason at Gulf Coast Gutters yet, please let me know.</p>"
                    body_text: "Hi Ray & Linda, Attached is your invoice for the new roof‚Äîwe hope you absolutely love it! If you haven't heard from Jason at Gulf Coast Gutters yet, please let me know."
                    occurred_at: "2025-08-30T20:01:00.573Z"
                    activity_type: "user"
                    priority: "normal"
                    created_at: "2025-08-30T20:01:00.573Z"
                    updated_at: "2025-08-31T04:57:48.276Z"
                system_activity:
                  summary: System-generated status change
                  value:
                    id: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                    entity_type: "job"
                    entity_id: "063f3628-e7eb-46f4-8e4d-c21544711542"
                    author: "System"
                    body_text: "Job status automatically changed from 'in_progress' to 'completed'"
                    occurred_at: "2025-08-31T15:45:00Z"
                    activity_type: "system"
                    priority: "low"
                    created_at: "2025-08-31T15:45:00Z"
                    updated_at: "2025-08-31T15:45:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

  /jobs/{jobId}/activity:
    get:
      tags:
        - Activities
      summary: List job activities
      description: Returns activities specifically related to a job, pre-filtered for convenience
      operationId: listJobActivities
      parameters:
        - name: jobId
          in: path
          required: true
          description: Job identifier (UUID format)
          schema:
            type: string
            format: uuid
          example: "063f3628-e7eb-46f4-8e4d-c21544711542"
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/dir'
        - name: activity_type
          in: query
          description: Filter by activity type
          schema:
            $ref: '#/components/schemas/ActivityType'
        - name: priority
          in: query
          description: Filter by priority level
          schema:
            $ref: '#/components/schemas/ActivityPriority'
      responses:
        '200':
          description: Successfully retrieved job activities
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Activity'
              examples:
                job_activity_timeline:
                  summary: Job activity timeline
                  value:
                    data:
                      - id: "bf4ab74f-830f-45ca-9466-8932e08d7303"
                        entity_type: "job"
                        entity_id: "063f3628-e7eb-46f4-8e4d-c21544711542"
                        author: "Barron Naar"
                        body_html: "<p>Attached is your invoice for the new roof</p>"
                        body_text: "Attached is your invoice for the new roof"
                        occurred_at: "2025-08-30T20:01:00.573Z"
                        activity_type: "user"
                        priority: "normal"
                        created_at: "2025-08-30T20:01:00.573Z"
                        updated_at: "2025-08-31T04:57:48.276Z"
                    total: 8
                    limit: 25
                    offset: 0
                    has_more: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

  /activity/{activityId}/files:
    get:
      tags:
        - Files
      summary: Get activity files
      description: |
        Returns files associated with an activity, including signed URLs for secure access.
        Files are typically documents, photos, or reports related to activity communications.
      operationId: getActivityFiles
      parameters:
        - name: activityId
          in: path
          required: true
          description: Activity identifier (UUID format)
          schema:
            type: string
            format: uuid
          example: "bf4ab74f-830f-45ca-9466-8932e08d7303"
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: kind
          in: query
          description: Filter by file kind
          schema:
            $ref: '#/components/schemas/FileKind'
          example: "document"
      responses:
        '200':
          description: Successfully retrieved activity files
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/FileAsset'
              examples:
                activity_files:
                  summary: Activity with attached files
                  value:
                    data:
                      - id: "file_a1b2c3d4"
                        name: "pensacola-108-1.pdf"
                        kind: "document"
                        size: 1547832
                        mime_type: "application/pdf"
                        signed_url: "https://cvjpaaxpckyawrowlouu.supabase.co/storage/v1/object/sign/assets/313a1513-9930-4e7a-bf93-58cd8166f3a5/messages/039c435d-2de6-43a6-93c3-8311990830c5/docs/pensacola-108-1.pdf?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        expires_at: "2025-09-07T04:26:41Z"
                        created_at: "2025-08-31T04:57:13.353Z"
                    total: 1
                    limit: 25
                    offset: 0
                    has_more: false
                no_files:
                  summary: Activity with no files
                  value:
                    data: []
                    total: 0
                    limit: 25
                    offset: 0
                    has_more: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: APIKey
      description: API key authentication using Bearer token

  parameters:
    limit:
      name: limit
      in: query
      description: Maximum number of items to return (1-100)
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
      example: 25
    
    offset:
      name: offset
      in: query
      description: Number of items to skip
      schema:
        type: integer
        minimum: 0
        default: 0
      example: 0
    
    sort:
      name: sort
      in: query
      description: Field to sort by
      schema:
        type: string
        enum: [created_at, updated_at, name, status, priority]
        default: created_at
      example: created_at
    
    dir:
      name: dir
      in: query
      description: Sort direction
      schema:
        type: string
        enum: [asc, desc]
        default: desc
      example: desc
    
    q:
      name: q
      in: query
      description: Search query string
      schema:
        type: string
        minLength: 1
        maxLength: 100
      example: "smith"

  schemas:
    Contact:
      type: object
      required:
        - id
        - name
        - emails
        - created_at
        - updated_at
      properties:
        id:
          type: string
          pattern: '^con_[a-z0-9]{8}$'
          description: Unique contact identifier
          example: "con_a1b2c3d4"
        name:
          type: string
          description: Full name of the contact
          example: "John Smith"
        company:
          type: string
          description: Company or organization name
          example: "Acme Corp"
        emails:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ContactEmail'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/ContactPhone'
        address:
          type: object
          properties:
            street:
              type: string
              example: "123 Main St"
            city:
              type: string
              example: "San Francisco"
            state:
              type: string
              example: "CA"
            postal_code:
              type: string
              example: "94105"
            country:
              type: string
              example: "US"
        tags:
          type: array
          items:
            type: string
          example: ["vip", "contractor"]
        created_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp
          example: "2024-01-20T14:45:00Z"

    ContactEmail:
      type: object
      required:
        - email
        - type
        - is_primary
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        type:
          type: string
          enum: [work, personal, other]
          example: "work"
        is_primary:
          type: boolean
          example: true

    ContactPhone:
      type: object
      required:
        - phone
        - type
        - is_primary
      properties:
        phone:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: E.164 format
          example: "+14155551234"
        type:
          type: string
          enum: [mobile, work, home, other]
          example: "mobile"
        is_primary:
          type: boolean
          example: true

    Activity:
      type: object
      required:
        - id
        - entity_type
        - entity_id
        - author
        - occurred_at
        - activity_type
        - priority
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique activity identifier (UUID format)
          example: "bf4ab74f-830f-45ca-9466-8932e08d7303"
        entity_type:
          $ref: '#/components/schemas/ActivityEntityType'
        entity_id:
          type: string
          format: uuid
          description: ID of the related entity (job, contact, etc.)
          example: "063f3628-e7eb-46f4-8e4d-c21544711542"
        author:
          type: string
          maxLength: 100
          description: Name of the person or system that created this activity
          example: "Barron Naar"
        body_html:
          type: string
          description: Rich HTML content of the activity
          example: "<p>Hi Ray &amp; Linda,</p><p>Attached is your invoice for the new roof‚Äîwe hope you absolutely love it!</p>"
        body_text:
          type: string
          description: Plain text content of the activity
          example: "Hi Ray & Linda, Attached is your invoice for the new roof‚Äîwe hope you absolutely love it!"
        occurred_at:
          type: string
          format: date-time
          description: When this activity actually occurred (ISO 8601)
          example: "2025-08-30T20:01:00.573Z"
        activity_type:
          $ref: '#/components/schemas/ActivityType'
        priority:
          $ref: '#/components/schemas/ActivityPriority'
        created_at:
          type: string
          format: date-time
          description: When this activity was created in the system (ISO 8601)
          example: "2025-08-30T20:01:00.573Z"
        updated_at:
          type: string
          format: date-time
          description: When this activity was last updated (ISO 8601)
          example: "2025-08-31T04:57:48.276Z"

    ActivityEntityType:
      type: string
      description: Type of entity the activity is related to
      enum:
        - job
        - contact
        - user
      example: "job"

    ActivityType:
      type: string
      description: Type of activity (user-generated vs system-generated)
      enum:
        - user
        - system
      example: "user"

    ActivityPriority:
      type: string
      description: Priority level of the activity
      enum:
        - low
        - normal
        - high
        - urgent
      example: "normal"

    Job:
      type: object
      required:
        - id
        - title
        - status
        - status_updated_at
        - priority
        - contact_id
        - created_at
        - updated_at
      properties:
        id:
          type: string
          pattern: '^job_[a-z0-9]{8}$'
          description: Unique job identifier
          example: "job_x1y2z3a4"
        title:
          type: string
          description: Job title or description
          example: "HVAC Maintenance - Building A"
        status:
          $ref: '#/components/schemas/JobStatus'
        status_reason:
          type: string
          description: Optional reason for status (especially for blocked)
          example: "Awaiting parts delivery"
        status_updated_at:
          type: string
          format: date-time
          description: When status last changed
          example: "2024-01-20T08:00:00Z"
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: "high"
        contact_id:
          type: string
          pattern: '^con_[a-z0-9]{8}$'
          description: Associated contact ID
          example: "con_a1b2c3d4"
        scheduled_start:
          type: string
          format: date-time
          description: Scheduled start time
          example: "2024-01-20T09:00:00Z"
        scheduled_end:
          type: string
          format: date-time
          description: Scheduled end time
          example: "2024-01-20T17:00:00Z"
        assignee_ids:
          type: array
          items:
            type: string
          example: ["usr_abc123", "usr_def456"]
        tags:
          type: array
          items:
            type: string
          example: ["maintenance", "hvac"]
        created_at:
          type: string
          format: date-time
          example: "2024-01-18T14:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-20T08:00:00Z"

    FileAsset:
      type: object
      required:
        - id
        - name
        - kind
        - size
        - mime_type
        - signed_url
        - expires_at
        - created_at
      properties:
        id:
          type: string
          pattern: '^file_[a-z0-9]{8}$'
          description: Unique file identifier
          example: "file_m3n4o5p6"
        name:
          type: string
          description: Original filename
          example: "site_photo_001.jpg"
        kind:
          $ref: '#/components/schemas/FileKind'
        size:
          type: integer
          description: File size in bytes
          example: 2457600
        mime_type:
          type: string
          description: MIME type
          example: "image/jpeg"
        signed_url:
          type: string
          format: uri
          description: Temporary signed URL for file access
          example: "https://storage.example.com/files/abc123?token=xyz&expires=1705745400"
        expires_at:
          type: string
          format: date-time
          description: When the signed URL expires (typically 15 minutes)
          example: "2024-01-20T10:30:00Z"
        metadata:
          type: object
          additionalProperties: true
          description: Optional file metadata
        created_at:
          type: string
          format: date-time
          example: "2024-01-20T10:15:00Z"

    PaginationResponse:
      type: object
      required:
        - total
        - limit
        - offset
        - has_more
      properties:
        total:
          type: integer
          description: Total number of items available
          example: 47
        limit:
          type: integer
          description: Maximum items returned
          example: 25
        offset:
          type: integer
          description: Number of items skipped
          example: 0
        has_more:
          type: boolean
          description: Whether more items exist
          example: true

    Error:
      type: object
      required:
        - type
        - title
        - status
        - code
        - detail
        - traceId
      properties:
        type:
          type: string
          format: uri
          description: URI reference for error type
          example: "https://api.portal.example.com/errors/validation"
        title:
          type: string
          description: Short error description
          example: "Validation Error"
        status:
          type: integer
          description: HTTP status code
          example: 422
        code:
          type: string
          description: Application-specific error code
          example: "VALIDATION_FAILED"
        detail:
          type: string
          description: Detailed error message
          example: "The provided email format is invalid"
        traceId:
          type: string
          description: Request trace identifier for debugging
          example: "abc123-def456-ghi789"
        errors:
          type: array
          description: Field-specific validation errors
          items:
            $ref: '#/components/schemas/ValidationError'

    ValidationError:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: Field name that failed validation
          example: "email"
        message:
          type: string
          description: Validation error message
          example: "Must be a valid email address"
        code:
          type: string
          description: Validation rule that failed
          example: "format.email"

    JobStatus:
      type: string
      enum: [open, scheduled, in_progress, blocked, awaiting_review, completed, canceled, archived]
      description: Canonical job status values
      example: "in_progress"

    FileKind:
      type: string
      enum: [document, photo, invoice, report, other]
      description: File classification types
      example: "photo"

  headers:
    X-RateLimit-Limit:
      description: The number of requests allowed in the current window
      schema:
        type: integer
        example: 60
    
    X-RateLimit-Remaining:
      description: The number of requests remaining in the current window
      schema:
        type: integer
        example: 45
    
    X-RateLimit-Reset:
      description: Unix timestamp when the current window resets
      schema:
        type: integer
        example: 1705745400
    
    Retry-After:
      description: Seconds until the client should retry the request
      schema:
        type: integer
        example: 30

  responses:
    BadRequest:
      description: Bad request - Invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "https://api.portal.example.com/errors/bad-request"
            title: "Bad Request"
            status: 400
            code: "BAD_REQUEST"
            detail: "Invalid query parameter format"
            traceId: "req_abc123def456"

    Unauthorized:
      description: Unauthorized - Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "https://api.portal.example.com/errors/unauthorized"
            title: "Unauthorized"
            status: 401
            code: "UNAUTHORIZED"
            detail: "Bearer token is missing or invalid"
            traceId: "req_ghi789jkl012"

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "https://api.portal.example.com/errors/forbidden"
            title: "Forbidden"
            status: 403
            code: "FORBIDDEN"
            detail: "Access denied for tenant"
            traceId: "req_mno345pqr678"

    NotFound:
      description: Not found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "https://api.portal.example.com/errors/not-found"
            title: "Not Found"
            status: 404
            code: "NOT_FOUND"
            detail: "Resource not found"
            traceId: "req_stu901vwx234"

    ValidationError:
      description: Validation error - Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "https://api.portal.example.com/errors/validation"
            title: "Validation Error"
            status: 422
            code: "VALIDATION_FAILED"
            detail: "Request validation failed"
            traceId: "req_yza567bcd890"
            errors:
              - field: "status"
                message: "Invalid status value"
                code: "enum.invalid"

    RateLimited:
      description: Too many requests - Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          $ref: '#/components/headers/X-RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/X-RateLimit-Remaining'
        X-RateLimit-Reset:
          $ref: '#/components/headers/X-RateLimit-Reset'
        Retry-After:
          $ref: '#/components/headers/Retry-After'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "https://api.portal.example.com/errors/rate-limit"
            title: "Too Many Requests"
            status: 429
            code: "RATE_LIMIT_EXCEEDED"
            detail: "Rate limit exceeded. Please retry after 30 seconds"
            traceId: "req_efg123hij456"

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: "https://api.portal.example.com/errors/internal"
            title: "Internal Server Error"
            status: 500
            code: "INTERNAL_ERROR"
            detail: "An unexpected error occurred"
            traceId: "req_klm789nop012"